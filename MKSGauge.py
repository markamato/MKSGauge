#!/usr/bin/env python
# -*- coding:utf-8 -*-


# ############################################################################
#  license :
# ============================================================================
#
#  File :        MKSGauge.py
#
#  Project :     rareRF
#
# This file is part of Tango device class.
# 
# Tango is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# Tango is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Tango.  If not, see <http://www.gnu.org/licenses/>.
# 
#
#  $Author :      mark.amato$
#
#  $Revision :    $
#
#  $Date :        $
#
#  $HeadUrl :     $
# ============================================================================
#            This file is generated by POGO
#     (Program Obviously used to Generate tango Object)
# ############################################################################

__all__ = ["MKSGauge", "MKSGaugeClass", "main"]

__docformat__ = 'restructuredtext'

import PyTango
import sys
# Add additional import
#----- PROTECTED REGION ID(MKSGauge.additionnal_import) ENABLED START -----#
import MKSSerial
#----- PROTECTED REGION END -----#	//	MKSGauge.additionnal_import

# Device States Description
# No states for this device


class MKSGauge (PyTango.Device_4Impl):
    """Simple MKS Gauge class.  Allows configuration of setpoint parameters, and allows readback of pressure attributes. 
    By default uses PR3 combined pressure reading and reports as float."""
    
    # -------- Add you global variables here --------------------------
    #----- PROTECTED REGION ID(MKSGauge.global_variables) ENABLED START -----#
    
    #----- PROTECTED REGION END -----#	//	MKSGauge.global_variables

    def __init__(self, cl, name):
        PyTango.Device_4Impl.__init__(self,cl,name)
        self.debug_stream("In __init__()")
        MKSGauge.init_device(self)
        #----- PROTECTED REGION ID(MKSGauge.__init__) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	MKSGauge.__init__
        
    def delete_device(self):
        self.debug_stream("In delete_device()")
        #----- PROTECTED REGION ID(MKSGauge.delete_device) ENABLED START -----#
        self.Gauge.StopSerial()
        #----- PROTECTED REGION END -----#	//	MKSGauge.delete_device

    def init_device(self):
        self.debug_stream("In init_device()")
        self.get_device_properties(self.get_device_class())
        self.set_state(PyTango.DevState.INIT)
        self.attr_gaugePressure_read = 0.0
        self.attr_gaugeSP1Status_read = False
        self.attr_gaugeSP2Status_read = False
        self.attr_gaugeSP3Status_read = False
        #----- PROTECTED REGION ID(MKSGauge.init_device) ENABLED START -----#
        self.Gauge = MKSSerial.MKSGauge()
        self.Gauge.StartSerial()
        
        self.set_state(PyTango.DevState.ON)
        #----- PROTECTED REGION END -----#	//	MKSGauge.init_device

    def always_executed_hook(self):
        self.debug_stream("In always_excuted_hook()")
        #----- PROTECTED REGION ID(MKSGauge.always_executed_hook) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	MKSGauge.always_executed_hook

    # -------------------------------------------------------------------------
    #    MKSGauge read/write attribute methods
    # -------------------------------------------------------------------------
    
    def read_gaugePressure(self, attr):
        self.debug_stream("In read_gaugePressure()")
        #----- PROTECTED REGION ID(MKSGauge.gaugePressure_read) ENABLED START -----#
        self.attr_gaugePressure_read = self.Gauge.GetPressure()
        attr.set_value(self.attr_gaugePressure_read)
        
        #----- PROTECTED REGION END -----#	//	MKSGauge.gaugePressure_read
        
    def read_gaugeSP1Status(self, attr):
        self.debug_stream("In read_gaugeSP1Status()")
        #----- PROTECTED REGION ID(MKSGauge.gaugeSP1Status_read) ENABLED START -----#
        statusstring = self.Gauge.Get('SS1')
        status = statusstring[7:10]
        if status == "SET":
			self.attr_gaugeSP1Status_read = True
        else:
			self.attr_gaugeSP1Status_read = False
        attr.set_value(self.attr_gaugeSP1Status_read)
        
        #----- PROTECTED REGION END -----#	//	MKSGauge.gaugeSP1Status_read
        
    def read_gaugeSP2Status(self, attr):
        self.debug_stream("In read_gaugeSP2Status()")
        #----- PROTECTED REGION ID(MKSGauge.gaugeSP2Status_read) ENABLED START -----#
        statusstring = self.Gauge.Get('SS2')
        status = statusstring[7:10]
        if status == "SET":
			self.attr_gaugeSP2Status_read = True
        else:
			self.attr_gaugeSP2Status_read = False
        attr.set_value(self.attr_gaugeSP2Status_read)
        
        #----- PROTECTED REGION END -----#	//	MKSGauge.gaugeSP2Status_read
        
    def read_gaugeSP3Status(self, attr):
        self.debug_stream("In read_gaugeSP3Status()")
        #----- PROTECTED REGION ID(MKSGauge.gaugeSP3Status_read) ENABLED START -----#
        statusstring = self.Gauge.Get('SS3')
        status = statusstring[7:10]
        if status == "SET":
			self.attr_gaugeSP3Status_read = True
        else:
			self.attr_gaugeSP3Status_read = False
        attr.set_value(self.attr_gaugeSP3Status_read)
        
        #----- PROTECTED REGION END -----#	//	MKSGauge.gaugeSP3Status_read
        
    
    
            
    def read_attr_hardware(self, data):
        self.debug_stream("In read_attr_hardware()")
        #----- PROTECTED REGION ID(MKSGauge.read_attr_hardware) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	MKSGauge.read_attr_hardware


    # -------------------------------------------------------------------------
    #    MKSGauge command methods
    # -------------------------------------------------------------------------
    
    def SendSerial(self, argin):
        """ Allows an arbitrary serial command to be sent to the gauge
        :param argin: 
        :type argin: PyTango.DevString
        :rtype: PyTango.DevString
        """
        self.debug_stream("In SendSerial()")
        argout = ""
        #----- PROTECTED REGION ID(MKSGauge.SendSerial) ENABLED START -----#
        self.Gauge.gaugeSerial.write(argin)
        argout = self.Gauge.gaugeSerial.readline()
        #----- PROTECTED REGION END -----#	//	MKSGauge.SendSerial
        return argout
        
    def SetSetPoint(self, argin):
        """ Commands a setpoint using the parameters in the system
        :param argin: 
        :type argin: PyTango.DevShort
        """
        self.debug_stream("In SetSetPoint()")
        #----- PROTECTED REGION ID(MKSGauge.SetSetPoint) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	MKSGauge.SetSetPoint
        

    #----- PROTECTED REGION ID(MKSGauge.programmer_methods) ENABLED START -----#
    
    #----- PROTECTED REGION END -----#	//	MKSGauge.programmer_methods

class MKSGaugeClass(PyTango.DeviceClass):
    # -------- Add you global class variables here --------------------------
    #----- PROTECTED REGION ID(MKSGauge.global_class_variables) ENABLED START -----#
    
    #----- PROTECTED REGION END -----#	//	MKSGauge.global_class_variables


    #    Class Properties
    class_property_list = {
        'setpoint1Enable':
            [PyTango.DevString, 
            "Enable or disables setpoint",
            ["ABS"] ],
        'setpoint2Enable':
            [PyTango.DevString, 
            "Enable or disables setpoint",
            ["ABS"] ],
        'setpoint3Enable':
            [PyTango.DevString, 
            "Enable or disables setpoint",
            ["ABS"] ],
        'setpoint1Direction':
            [PyTango.DevString, 
            "Direction of setpoint.",
            ["BELOW"] ],
        'setpoint2Direction':
            [PyTango.DevString, 
            "Direction of setpoint.",
            ["ABOVE"] ],
        'setpoint3Direction':
            [PyTango.DevString, 
            "Direction of setpoint.",
            ["BELOW"] ],
        'setpoint1Hysteresis':
            [PyTango.DevFloat, 
            "setpoint hysteresis",
            [0.01]],
        'setpoint2Hysteresis':
            [PyTango.DevFloat, 
            "setpoint hysteresis",
            [710]],
        'setpoint3Hysteresis':
            [PyTango.DevFloat, 
            "setpoint hysteresis",
            [] ],
        'setpoint1Value':
            [PyTango.DevFloat, 
            "setpoint in torr",
            [0.01]],
        'setpoint2Value':
            [PyTango.DevFloat, 
            "setpoint in torr",
            [700]],
        'setpoint3Value':
            [PyTango.DevFloat, 
            "setpoint in torr",
            [700]],
        }


    #    Device Properties
    device_property_list = {
        }


    #    Command definitions
    cmd_list = {
        'SendSerial':
            [[PyTango.DevString, "none"],
            [PyTango.DevString, "none"]],
        'SetSetPoint':
            [[PyTango.DevShort, "none"],
            [PyTango.DevString, "none"]],
        }


    #    Attribute definitions
    attr_list = {
        'gaugePressure':
            [[PyTango.DevFloat,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'Polling period': "1000",
            } ],
        'gaugeSP1Status':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ]],
        'gaugeSP2Status':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ]],
        'gaugeSP3Status':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ]],
        }


def main():
    try:
        py = PyTango.Util(sys.argv)
        py.add_class(MKSGaugeClass, MKSGauge, 'MKSGauge')
        #----- PROTECTED REGION ID(MKSGauge.add_classes) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	MKSGauge.add_classes

        U = PyTango.Util.instance()
        U.server_init()
        U.server_run()

    except PyTango.DevFailed as e:
        print ('-------> Received a DevFailed exception:', e)
    except Exception as e:
        print ('-------> An unforeseen exception occured....', e)

if __name__ == '__main__':
    main()
